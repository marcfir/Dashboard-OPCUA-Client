---
name: Build

on: [push, pull_request]

jobs:
  build-linux:
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        build_type: [Debug, Release]
        arch: ["386", "amd64"]
    runs-on: ubuntu-latest
    env:
      CMAKE_INSTALL_PREFIX: ${{ github.workspace }}/install
    steps:
      build:
        uses: marcfir/Dashboard-OPCUA-Client/.github/workflows/build-bin.yml@feat/release-workflow
        with:
          os: ${{matrix.os}}
          build_type: ${{matrix.build_type}}
          arch: ${{matrix.arch}}
      # - name: Run integration test cacert_test
      #   run : |
      #     cd UmatiDashboardOpcUaClient/Tests/integration_tests/cacert_test
      #     ./genCerts.sh
      #     cp "${{ github.workspace }}/build/Dashboard-Client-build/Tests/TestCaCertificate" .
      #     docker-compose up -d
      #     ./evaluateTest.sh
      # - name: Upload Artefacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: UmatiDashboardOpcUaClient-${{matrix.build_type}}-${{matrix.os}}-${{matrix.arch}}
      #     path: |
      #       ${{ env.CMAKE_INSTALL_PREFIX }}/bin
      #       ${{ env.CMAKE_INSTALL_PREFIX }}/share/DashboardOpcUaClient
      # - name: Upload Debian package
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: dashboardopcuaclient-${{matrix.build_type}}-${{matrix.os}}-${{matrix.arch}}.deb
      #     path: |
      #       ${{ env.CMAKE_INSTALL_PREFIX }}/*.deb
  build-windows:
    strategy:
      matrix:
        os: [windows-2019, windows-2022]
        build_type: [Debug, Release]
        arch: ["386", "amd64"]
    runs-on: ${{matrix.os}}
    env:
      CMAKE_INSTALL_PREFIX: ${{ github.workspace }}/install
    steps:
      - name: build
        uses: ./.github/workflows/build-bin.yml
        with:
          os: ${{matrix.os}}
          build_type: ${{matrix.build_type}}
          arch: ${{matrix.arch}}
      # - name: Download CA Certs
      #   run: |
      #     cd ${{ env.CMAKE_INSTALL_PREFIX }}
      #     mkdir -p  bin/certs
      #     curl https://curl.se/ca/cacert.pem -o bin/certs/cacert.pem -s
      # - name: Upload Artefacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: UmatiDashboardOpcUaClient-${{matrix.build_type}}-${{matrix.os}}-${{matrix.arch}}
      #     path: |
      #       ${{ env.CMAKE_INSTALL_PREFIX }}/bin
      #       ${{ env.CMAKE_INSTALL_PREFIX }}/share/DashboardOpcUaClient
  # docker:
  #   runs-on: ubuntu-20.04
  #   env:
  #     # Check if this is not a pull request and GITHUB_TOKEN is set
  #     # As all env variables are strings, you need to compaire against "== 'true'" (not "== true")
  #     IS_NOT_PR: ${{ !github.head_ref && true }}
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3.3.0
  #       with:
  #         path: UmatiDashboardOpcUaClient
  #         submodules: recursive
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2.4.1
  #     - name: PrepareReg Names
  #       run: |
  #         #shellcheck  disable=SC2154
  #         echo IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
  #         echo IMAGE_TAG=$(echo ${{ github.ref }} | tr '[:upper:]' '[:lower:]' |  awk '{sub(/([^\/]*\/){2}/,""); gsub(/\/|_/, "-")}1') >> $GITHUB_ENV
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v2.1.0
  #       if: env.IS_NOT_PR == 'true' && ${{ github.actor }} != 'dependabot'
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build Docker Release
  #       uses: docker/build-push-action@v4.0.0
  #       with:
  #         file: "./UmatiDashboardOpcUaClient/Dockerfile"
  #         context: ./UmatiDashboardOpcUaClient
  #         platforms: linux/amd64
  #         push: ${{env.IS_NOT_PR == 'true'}}
  #         tags: |
  #           ghcr.io/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}
